version: 2

references:
  cache_key: &cache_key
    key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key

  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  download_dependencies: &download_dependencies
    run:
      name: Download Dependencies
      command: ./gradlew androidDependencies

  workspace: &workspace
    ~/code

  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace

jobs:
  build:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - *download_dependencies
      - *save_cache
      - run:
          name: Build debug APK and test APK
          command: |
            ./gradlew :app:assembleDebug
      - store_artifacts:
          path: app/build/outputs/apk
          destination: apk
      - persist_to_workspace:
          root: *workspace
          paths:
            - .

  quality:
    <<: *android_config
    steps:
      - *attach_workspace
      - *restore_cache
      - run:
          name: Run Android Lint
          command: ./gradlew lint
      - run:
          name: Run ktlint
          command: ./gradlew ktlintCheck
      - run:
          name: Run detekt
          command: ./gradlew detekt
      - store_artifacts:
          path: app/build/reports
          destination: reports

  test_unit:
    <<: *android_config
    steps:
      - *attach_workspace
      - *restore_cache
      - run:
          name: Run Unit Tests
          command: ./gradlew jacocoTestReport
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results
          destination: test-results
      - persist_to_workspace:
          root: *workspace
          paths:
            - .

  test_instrumented:
    <<: *android_config
    steps:
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            sudo gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Configure environment
          command: |
            echo 'export APK_PATH=`find . -path "*.apk" ! -path "*unaligned.apk" ! -path "*Test*.apk" -print -quit`' >> $BASH_ENV
            echo 'export TEST_APK_PATH=`find "." "-path" "*Test*.apk" -print -quit`' >> $BASH_ENV
      - run:
          name: Test with Firebase Test Lab
          command: sudo gcloud firebase test android run --type instrumentation --app ${APK_PATH} --test ${TEST_APK_PATH} --results-bucket cloud-test-${GOOGLE_PROJECT_ID}
#      - run:
#          name: Install gsutil dependency and copy test results data
#          command: |
#            sudo pip install -U crcmod
#            sudo gsutil -m cp -r -U `sudo gsutil ls gs://[BUCKET_NAME]/[OBJECT_NAME] | tail -1` ${CIRCLE_ARTIFACTS}/ | true

  report_coverage:
    <<: *android_config
    steps:
      - *attach_workspace
      - *restore_cache
      - run:
          name: Upload coverage report to Coveralls
          command: ./gradlew coveralls

workflows:
  version: 2
  workflow:
    jobs:
      - build
      - quality:
          requires:
            - build
      - test_unit:
          requires:
            - build
      - report_coverage:
          requires:
            - test_unit
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

final testBuildType = 'debug'

final androidExclusion = [
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
        '**/R.*',
        '**/R$*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*_MembersInjector.*',
        '**/Dagger*Component.*',
        '**/Dagger*Component$Builder.*',
        '**/*Module_*Factory.*',
        '**/*Fragment*.*',
        '**/*Activity*.*',
        '**/*Adapter*.*',
        '**/*ViewPager*.*',
        '**/*ViewHolder*.*',
        '**/*Module*.*'
]

final unitTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/${testBuildType}/com/guilherme/marvelcharacters", excludes: androidExclusion)
final mainSrc = "${project.projectDir}/src/main/java"

task jacocoTestReport(type: JacocoReport, dependsOn: ["test${testBuildType.capitalize()}UnitTest"]) {
    group = 'verification'
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco")
    }

    classDirectories.from = files([unitTree])
    sourceDirectories.from = files([mainSrc])
    executionData.from = fileTree(dir: "$buildDir", includes: ["jacoco/test${testBuildType.capitalize()}UnitTest.exec"])

    doLast {
        println "jacoco unit report has been generated to file://${reports.html.destination}/index.html"
    }
}